<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Louis&#39; Blog</title>
  <subtitle>All about software development for the web</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://www.louisbourque.ca/blog/"/>
  <updated>2016-10-27T19:52:45.733Z</updated>
  <id>http://www.louisbourque.ca/blog/</id>
  
  <author>
    <name>Louis Bourque</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Animated CSS Label</title>
    <link href="http://www.louisbourque.ca/blog/2016/10/animated-input-label/"/>
    <id>http://www.louisbourque.ca/blog/2016/10/animated-input-label/</id>
    <published>2016-10-27T06:00:00.000Z</published>
    <updated>2016-10-27T19:52:45.733Z</updated>
    
    <content type="html"><![CDATA[<p>A simple example of an input field with placeholder text which moves out of the way when text is entered:</p>
<form><br>  <input name="myInput" id="myInput" class="animated-input" type="text"><label for="myInput">Placeholder</label><br></form>


<h2 id="How-it’s-done"><a href="#How-it’s-done" class="headerlink" title="How it’s done"></a>How it’s done</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"myInput"</span> <span class="attr">id</span>=<span class="string">"myInput"</span> <span class="attr">class</span>=<span class="string">"animated-input"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"myInput"</span>&gt;</span>Placeholder<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="text"]</span> &#123;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line">  <span class="attribute">height</span>: <span class="built_in">calc</span>(2em + 1px);</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0.5em</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">resize</span>: none;</div><div class="line">  <span class="attribute">outline</span>: none;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">1em</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="text"]</span><span class="selector-pseudo">:focus</span> &#123;</div><div class="line">  <span class="attribute">border-color</span>: <span class="number">#00bafa</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="text"]</span><span class="selector-pseudo">:focus</span> + <span class="selector-tag">label</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#00bafa</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="text"]</span><span class="selector-pseudo">:focus</span> + <span class="selector-tag">label</span>,</div><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="text"]</span><span class="selector-class">.filled-in</span> + <span class="selector-tag">label</span> &#123;</div><div class="line">  <span class="attribute">transition-duration</span>: .<span class="number">2s</span>;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(0, -3em) <span class="built_in">scale</span>(0.9, 0.9);</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="text"]</span> + <span class="selector-tag">label</span> &#123;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="built_in">calc</span>(1em + 2px);</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">2px</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</div><div class="line">  <span class="attribute">white-space</span>: nowrap;</div><div class="line">  <span class="attribute">transition</span>: <span class="number">0.3s</span> ease;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(0, -1.6em)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Add listener for when input is blurred</span></div><div class="line"><span class="keyword">var</span> matches = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.animated-input'</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;matches.length; i++)&#123;</div><div class="line">  addEvent(matches[i],<span class="string">'blur'</span>,onAnimatedInputBlur);</div><div class="line">&#125;</div><div class="line"><span class="comment">// when input is blurred, check if the value is empty</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">onAnimatedInputBlur</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(event.target.value)&#123;</div><div class="line">    <span class="comment">//if input is non-empty, keep placeholder out of the way</span></div><div class="line">    addClass(event.target,<span class="string">'filled-in'</span>);</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    removeClass(event.target,<span class="string">'filled-in'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// helper functions</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasClass</span>(<span class="params">el, className</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> el.classList ? el.classList.contains(className) : <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'\\b'</span>+ className+<span class="string">'\\b'</span>).test(el.className);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">el, className</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (el.classList) el.classList.add(className);</div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (!hasClass(el, className)) el.className += <span class="string">' '</span> + className;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeClass</span>(<span class="params">el, className</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (el.classList) el.classList.remove(className);</div><div class="line">  <span class="keyword">else</span> el.className = el.className.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'\\b'</span>+ className+<span class="string">'\\b'</span>, <span class="string">'g'</span>), <span class="string">''</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvent</span>(<span class="params">el, type, handler</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (el.attachEvent) el.attachEvent(<span class="string">'on'</span>+type, handler); <span class="keyword">else</span> el.addEventListener(type, handler);</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<script>
var matches = document.querySelectorAll('.animated-input');

for (var i=0; i<matches.length; i++){
  addEvent(matches[i],'blur',onAnimatedInputBlur);
}

function onAnimatedInputBlur(event){
  if(event.target.value){
    addClass(event.target,'filled-in');
  }else{
    removeClass(event.target,'filled-in');
  }
}

function hasClass(el, className) {
  return el.classList ? el.classList.contains(className) : new RegExp('\\b'+ className+'\\b').test(el.className);
}

function addClass(el, className) {
  if (el.classList) el.classList.add(className);
  else if (!hasClass(el, className)) el.className += ' ' + className;
}

function removeClass(el, className) {
  if (el.classList) el.classList.remove(className);
  else el.className = el.className.replace(new RegExp('\\b'+ className+'\\b', 'g'), '');
}

function addEvent(el, type, handler) {
  if (el.attachEvent) el.attachEvent('on'+type, handler); else el.addEventListener(type, handler);
}
</script>
<style>
input[type="text"] {
  box-sizing: border-box;
  height: calc(2em + 1px);
  padding: 0.5em;
  border: 1px solid #999;
  background: #fff;
  resize: none;
  outline: none;
  display: block;
  line-height: 1em;
}

input[type="text"]:focus {
  border-color: #00bafa;
}
input[type="text"]:focus + label {
  color: #00bafa;
}
input[type="text"]:focus + label,
input[type="text"].filled-in + label {
  transition-duration: .2s;
  transform: translate(0, -3em) scale(0.9, 0.9);
  background-color: #fff;
}

input[type="text"] + label {
  display: inline-block;
  margin: 0 calc(1em + 2px);
  padding: 0 2px;
  color: #999;
  white-space: nowrap;
  transition: 0.3s ease;
  transform: translate(0, -1.6em)
}
</style>

]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A simple example of an input field with placeholder text which moves out of the way when text is entered:&lt;/p&gt;
&lt;form&gt;&lt;br&gt;  &lt;input name=&quot;my
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Calgary Open Data GraphQL API</title>
    <link href="http://www.louisbourque.ca/blog/2016/09/graphql/"/>
    <id>http://www.louisbourque.ca/blog/2016/09/graphql/</id>
    <published>2016-09-26T22:37:00.000Z</published>
    <updated>2016-09-27T00:26:35.234Z</updated>
    
    <content type="html"><![CDATA[<p>Facebook recently announced <a href="http://graphql.org/" target="_blank" rel="external">GraphQL</a>, a query language for building APIs. The strength of this new language has to do with the fact that you can request all the required data in one query, instead of having to make multiple requests. Writing queries is intuitive and the structure of the results mirrors the structure of the query.</p>
<p>GraphiQL was also created to allow developers to interact with the API they’re developing. It has autocomplete and built in documentation which are incredibly useful.</p>
<p>I wanted to create an API using this new language to see how it works and explore the possibilities. You can <a href="https://opendata-graphql.herokuapp.com/graphql" target="_blank" rel="external">interact with this API here</a></p>
<h2 id="Building-an-API"><a href="#Building-an-API" class="headerlink" title="Building an API"></a>Building an API</h2><p>The first step was creating a hello world query. First, <code>GraphQLObjectType</code> is used to create a Query, and the following is passed as a field:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hello: &#123;</div><div class="line">  type: GraphQLString,</div><div class="line">  resolve: () =&gt; &apos;world&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The <code>type</code> field describes the type of result returned. It can be a basic type like string, int, or Boolean. It can also be a custom type, which we’ll see later.</p>
<p>The <code>resolve</code> field is a function which generates the result. In the example above, the result will always be “world”.</p>
<p>If we run the following query in <a href="https://opendata-graphql.herokuapp.com/graphql?query=query%7B%0A  hello%0A%7D" target="_blank" rel="external">GraphiQL</a>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">query&#123;</div><div class="line">  hello</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>We will get the following result:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;data&quot;: &#123;</div><div class="line">    &quot;hello&quot;: &quot;world&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Passing-Parameters-to-GraphQL"><a href="#Passing-Parameters-to-GraphQL" class="headerlink" title="Passing Parameters to GraphQL"></a>Passing Parameters to GraphQL</h2><p>Then I tried to create something a little more dynamic, and I created an add function. By adding arguments to the query and resolve function, you can use those arguments in the generation of our results</p>
<p>The following example shows how we can pass two integers to an <code>add</code> function, and return the sum.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">add: &#123;</div><div class="line">      type: GraphQLInt,</div><div class="line">      args:&#123;</div><div class="line">        a:&#123;</div><div class="line">          name:&apos;a&apos;,</div><div class="line">          type: GraphQLInt</div><div class="line">        &#125;,</div><div class="line">        b:&#123;</div><div class="line">          name:&apos;b&apos;,</div><div class="line">          type: GraphQLInt</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      resolve: (root,&#123;a,b&#125;) =&gt; a+b</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>The <code>type</code> field again describes the type of result returned. In this case we’re now returning an integer.</p>
<p>The <code>args</code> field is an object with properties which can be passed to the resolve function via the query. In this case we’re passing two integers, <code>a</code> and <code>b</code>.</p>
<p>The <code>resolve</code> field again is a function which generates the result. In this example, the result is the sum of a and b. The parameters are passed as a single object.</p>
<p>If we run the following query in <a href="https://opendata-graphql.herokuapp.com/graphql?query=query%7B%0A%20%20add%28a%3A3%2Cb%3A7%29%0A%7D" target="_blank" rel="external">GraphiQL</a>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">query&#123;</div><div class="line">  add(a:3,b:7)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>We will get the following result:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;data&quot;: &#123;</div><div class="line">    &quot;add&quot;: 10</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Querying-a-PostgreSQL-database-in-GraphQL"><a href="#Querying-a-PostgreSQL-database-in-GraphQL" class="headerlink" title="Querying a PostgreSQL database in GraphQL"></a>Querying a PostgreSQL database in GraphQL</h2><p>The previous examples were great for getting to know the basics, but if we want our API to be useful, it will have to inteact with data in more elaborate ways. Using some data from the <a href="https://data.calgary.ca/OpenData/Pages/DatasetListingAlphabetical.aspx" target="_blank" rel="external">City of Calgary Open Data Catalogue</a> I created a PostgreSQL database, and used GraphQL to interact with it.</p>
<p>The Query definition is a bit longer, but follows the same basic structure. I simply added many fields allowing to filter the data:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">fireStations: &#123;</div><div class="line">  type: new GraphQLList(fireStationType),</div><div class="line">  args: &#123;</div><div class="line">    nameContains: &#123;</div><div class="line">      name: &apos;nameContains&apos;,</div><div class="line">      type: GraphQLString</div><div class="line">    &#125;,</div><div class="line">    addressContains: &#123;</div><div class="line">      name: &apos;addressContains&apos;,</div><div class="line">      type: GraphQLString</div><div class="line">    &#125;,</div><div class="line">    hasFireSupport: &#123;</div><div class="line">      name: &apos;hasFireSupport&apos;,</div><div class="line">      type: GraphQLBoolean</div><div class="line">    &#125;,</div><div class="line">    hasMedRescue: &#123;</div><div class="line">      name: &apos;hasMedRescue&apos;,</div><div class="line">      type: GraphQLBoolean</div><div class="line">    &#125;,</div><div class="line">    hasAquaRescue: &#123;</div><div class="line">      name: &apos;hasAquaRescue&apos;,</div><div class="line">      type: GraphQLBoolean</div><div class="line">    &#125;,</div><div class="line">    hasHighAngRes: &#123;</div><div class="line">      name: &apos;hasHighAngRes&apos;,</div><div class="line">      type: GraphQLBoolean</div><div class="line">    &#125;,</div><div class="line">    hasHazCond: &#123;</div><div class="line">      name: &apos;hasHazCond&apos;,</div><div class="line">      type: GraphQLBoolean</div><div class="line">    &#125;,</div><div class="line">    hasAirportRes: &#123;</div><div class="line">      name: &apos;hasAirportRes&apos;,</div><div class="line">      type: GraphQLBoolean</div><div class="line">    &#125;,</div><div class="line">    hasHeavyRes: &#123;</div><div class="line">      name: &apos;hasHeavyRes&apos;,</div><div class="line">      type: GraphQLBoolean</div><div class="line">    &#125;,</div><div class="line">    hasPubSrvAsst: &#123;</div><div class="line">      name: &apos;hasPubSrvAsst&apos;,</div><div class="line">      type: GraphQLBoolean</div><div class="line">    &#125;,</div><div class="line">    hasFalseAlarm: &#123;</div><div class="line">      name: &apos;hasFalseAlarm&apos;,</div><div class="line">      type: GraphQLBoolean</div><div class="line">    &#125;,</div><div class="line">    hasHydBldInsp: &#123;</div><div class="line">      name: &apos;hasHydBldInsp&apos;,</div><div class="line">      type: GraphQLBoolean</div><div class="line">    &#125;,</div><div class="line">    hasInvestigat: &#123;</div><div class="line">      name: &apos;hasInvestigat&apos;,</div><div class="line">      type: GraphQLBoolean</div><div class="line">    &#125;,</div><div class="line">    hasH20_Safety: &#123;</div><div class="line">      name: &apos;hasH20_Safety&apos;,</div><div class="line">      type: GraphQLBoolean</div><div class="line">    &#125;,</div><div class="line">    hasChemDrop: &#123;</div><div class="line">      name: &apos;hasChemDrop&apos;,</div><div class="line">      type: GraphQLBoolean</div><div class="line">    &#125;,</div><div class="line">    hasSmokeDProg: &#123;</div><div class="line">      name: &apos;hasSmokeDProg&apos;,</div><div class="line">      type: GraphQLBoolean</div><div class="line">    &#125;,</div><div class="line">    hasStnTours: &#123;</div><div class="line">      name: &apos;hasStnTours&apos;,</div><div class="line">      type: GraphQLBoolean</div><div class="line">    &#125;,</div><div class="line">    hasSandWinter: &#123;</div><div class="line">      name: &apos;hasSandWinter&apos;,</div><div class="line">      type: GraphQLBoolean</div><div class="line">    &#125;,</div><div class="line">    hasBulkWater: &#123;</div><div class="line">      name: &apos;hasBulkWater&apos;,</div><div class="line">      type: GraphQLBoolean</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  resolve: resolvefireStations</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The <code>type</code> field now returns a list of objects, and those objects are a custom type <code>fireStationType</code>. The type is defined as follows:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">const fireStationType = new GraphQLObjectType(&#123;</div><div class="line">  name: &apos;FireStation&apos;,</div><div class="line">  description: &apos;A Fire Station&apos;,</div><div class="line">  fields: () =&gt; (&#123;</div><div class="line">    name: &#123;</div><div class="line">      type: GraphQLString,</div><div class="line">      description: &apos;Station Name&apos;,</div><div class="line">    &#125;,</div><div class="line">    address: &#123;</div><div class="line">      type: GraphQLString,</div><div class="line">      description: &apos;Station Address&apos;</div><div class="line">    &#125;,</div><div class="line">    firesupp: &#123;</div><div class="line">      type: GraphQLBoolean,</div><div class="line">      description: &apos;Fire Support&apos;</div><div class="line">    &#125;,</div><div class="line">    med_rescue: &#123;</div><div class="line">      type: GraphQLBoolean,</div><div class="line">      description: &apos;Medical Rescue&apos;</div><div class="line">    &#125;,</div><div class="line">    aquarescue: &#123;</div><div class="line">      type: GraphQLBoolean,</div><div class="line">      description: &apos;Water Rescue&apos;</div><div class="line">    &#125;,</div><div class="line">    highangres: &#123;</div><div class="line">      type: GraphQLBoolean,</div><div class="line">      description: &apos;High Ang Rescue&apos;</div><div class="line">    &#125;,</div><div class="line">    hazcond: &#123;</div><div class="line">      type: GraphQLBoolean,</div><div class="line">      description: &apos;Hazardous Conditions&apos;</div><div class="line">    &#125;,</div><div class="line">    airportres: &#123;</div><div class="line">      type: GraphQLBoolean,</div><div class="line">      description: &apos;Airport Rescue&apos;</div><div class="line">    &#125;,</div><div class="line">    heavyres: &#123;</div><div class="line">      type: GraphQLBoolean,</div><div class="line">      description: &apos;Heavy Rescue&apos;</div><div class="line">    &#125;,</div><div class="line">    pubsrvasst: &#123;</div><div class="line">      type: GraphQLBoolean,</div><div class="line">      description: &apos;Public Service Assistance&apos;</div><div class="line">    &#125;,</div><div class="line">    falsealarm: &#123;</div><div class="line">      type: GraphQLBoolean,</div><div class="line">      description: &apos;false Alarm&apos;</div><div class="line">    &#125;,</div><div class="line">    hydbldinsp: &#123;</div><div class="line">      type: GraphQLBoolean,</div><div class="line">      description: &apos;Hydro Building Inspection&apos;</div><div class="line">    &#125;,</div><div class="line">    investigat: &#123;</div><div class="line">      type: GraphQLBoolean,</div><div class="line">      description: &apos;Investigation&apos;</div><div class="line">    &#125;,</div><div class="line">    h2o_safety: &#123;</div><div class="line">      type: GraphQLBoolean,</div><div class="line">      description: &apos;Water Safety&apos;</div><div class="line">    &#125;,</div><div class="line">    chemdrop: &#123;</div><div class="line">      type: GraphQLBoolean,</div><div class="line">      description: &apos;Chemicals Drop Off&apos;</div><div class="line">    &#125;,</div><div class="line">    smokedprog: &#123;</div><div class="line">      type: GraphQLBoolean,</div><div class="line">      description: &apos;Smoke Detector Program&apos;</div><div class="line">    &#125;,</div><div class="line">    stntours: &#123;</div><div class="line">      type: GraphQLBoolean,</div><div class="line">      description: &apos;Station Tours&apos;</div><div class="line">    &#125;,</div><div class="line">    sandwinter: &#123;</div><div class="line">      type: GraphQLBoolean,</div><div class="line">      description: &apos;Sand Winter&apos;</div><div class="line">    &#125;,</div><div class="line">    bulkwater: &#123;</div><div class="line">      type: GraphQLBoolean,</div><div class="line">      description: &apos;Bulk Water&apos;</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>The <code>resolve</code> field again is a function, which is defined as follows:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">function resolvefireStations(rootValue, args )&#123;</div><div class="line">  return new Promise(function(resolve, reject) &#123;</div><div class="line">    var query = &apos;SELECT * from fire_stations WHERE 1=1&apos;</div><div class="line">    if(args.nameContains)&#123;</div><div class="line">      query += &apos; AND name like \&apos;%&apos;+args.nameContains+&apos;%\&apos;&apos;;</div><div class="line">    &#125;</div><div class="line">    if(args.addressContains)&#123;</div><div class="line">      query += &apos; AND address like \&apos;%&apos;+args.addressContains+&apos;%\&apos;&apos;;</div><div class="line">    &#125;</div><div class="line">    if(args.addressContains)&#123;</div><div class="line">      query += &apos; AND address like \&apos;%&apos;+args.addressContains+&apos;%\&apos;&apos;;</div><div class="line">    &#125;</div><div class="line">    if(typeof(args.hasFireSupport) === &apos;boolean&apos;)&#123;</div><div class="line">      query += &apos; AND FireSupp = &apos;+args.hasFireSupport;</div><div class="line">    &#125;</div><div class="line">    if(typeof(args.hasMedRescue) === &apos;boolean&apos;)&#123;</div><div class="line">      query += &apos; AND Med_Rescue = &apos;+args.hasMedRescue;</div><div class="line">    &#125;</div><div class="line">    if(typeof(args.hasAquaRescue) === &apos;boolean&apos;)&#123;</div><div class="line">      query += &apos; AND AquaRescue = &apos;+args.hasAquaRescue;</div><div class="line">    &#125;</div><div class="line">    if(typeof(args.hasHighAngRes) === &apos;boolean&apos;)&#123;</div><div class="line">      query += &apos; AND HighAngRes = &apos;+args.hasHighAngRes;</div><div class="line">    &#125;</div><div class="line">    if(typeof(args.hasHazCond) === &apos;boolean&apos;)&#123;</div><div class="line">      query += &apos; AND HazCond = &apos;+args.hasHazCond;</div><div class="line">    &#125;</div><div class="line">    if(typeof(args.hasAirportRes) === &apos;boolean&apos;)&#123;</div><div class="line">      query += &apos; AND AirportRes = &apos;+args.hasAirportRes;</div><div class="line">    &#125;</div><div class="line">    if(typeof(args.hasHeavyRes) === &apos;boolean&apos;)&#123;</div><div class="line">      query += &apos; AND HeavyRes = &apos;+args.hasHeavyRes;</div><div class="line">    &#125;</div><div class="line">    if(typeof(args.hasPubSrvAsst) === &apos;boolean&apos;)&#123;</div><div class="line">      query += &apos; AND PubSrvAsst = &apos;+args.hasPubSrvAsst;</div><div class="line">    &#125;</div><div class="line">    if(typeof(args.hasFalseAlarm) === &apos;boolean&apos;)&#123;</div><div class="line">      query += &apos; AND FalseAlarm = &apos;+args.hasFalseAlarm;</div><div class="line">    &#125;</div><div class="line">    if(typeof(args.hasHydBldInsp) === &apos;boolean&apos;)&#123;</div><div class="line">      query += &apos; AND HydBldInsp = &apos;+args.hasHydBldInsp;</div><div class="line">    &#125;</div><div class="line">    if(typeof(args.hasInvestigat) === &apos;boolean&apos;)&#123;</div><div class="line">      query += &apos; AND Investigat = &apos;+args.hasInvestigat;</div><div class="line">    &#125;</div><div class="line">    if(typeof(args.hasH20_Safety) === &apos;boolean&apos;)&#123;</div><div class="line">      query += &apos; AND H20_Safety = &apos;+args.hasH20_Safety;</div><div class="line">    &#125;</div><div class="line">    if(typeof(args.hasChemDrop) === &apos;boolean&apos;)&#123;</div><div class="line">      query += &apos; AND Chem_Drop = &apos;+args.hasChemDrop;</div><div class="line">    &#125;</div><div class="line">    if(typeof(args.hasSmokeDProg) === &apos;boolean&apos;)&#123;</div><div class="line">      query += &apos; AND SmokeDProg = &apos;+args.hasSmokeDProg;</div><div class="line">    &#125;</div><div class="line">    if(typeof(args.hasStnTours) === &apos;boolean&apos;)&#123;</div><div class="line">      query += &apos; AND StnTours = &apos;+args.hasStnTours;</div><div class="line">    &#125;</div><div class="line">    if(typeof(args.hasSandWinter) === &apos;boolean&apos;)&#123;</div><div class="line">      query += &apos; AND SandWinter = &apos;+args.hasSandWinter;</div><div class="line">    &#125;</div><div class="line">    if(typeof(args.hasBulkWater) === &apos;boolean&apos;)&#123;</div><div class="line">      query += &apos; AND BulkWater = &apos;+args.hasBulkWater;</div><div class="line">    &#125;</div><div class="line">    query += &apos;;&apos;;</div><div class="line">    db.connect(function(err, client, done) &#123;</div><div class="line">      if (err) &#123;reject(err);return;&#125;;</div><div class="line">      client</div><div class="line">        .query(query, function (err, result) &#123;</div><div class="line">          done();</div><div class="line">          if (err) &#123;reject(err);return;&#125;</div><div class="line">          resolve(result.rows);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">  &#125;).then(function(res) &#123;</div><div class="line">    return res;</div><div class="line">  &#125;, function(error) &#123;</div><div class="line">    console.error(&quot;Database Error:&quot;, error);</div><div class="line">    return null;</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The <code>resolvefireStations</code> function builds a SQL query based on the arguments passed in the GraphQL query. The database is queried for the results, which are returned as a promise.</p>
<p>If you’d like to obtain a listing of all <a href="https://opendata-graphql.herokuapp.com/graphql?query=query%7B%0A%20%20fireStations%28hasChemDrop%3Atrue%29%7B%0A%20%20%20%20name%0A%20%20%20%20address%0A%20%20%7D%0A%7D" target="_blank" rel="external">Calgary fire stations with chemical drop off services</a>, you could run:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">query&#123;</div><div class="line">  fireStations(hasChemDrop:true)&#123;</div><div class="line">    name</div><div class="line">    address</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Facebook recently announced &lt;a href=&quot;http://graphql.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GraphQL&lt;/a&gt;, a query language for building APIs.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Free Developer Business Card</title>
    <link href="http://www.louisbourque.ca/blog/2016/09/Developer-Business-Card/"/>
    <id>http://www.louisbourque.ca/blog/2016/09/Developer-Business-Card/</id>
    <published>2016-09-19T22:37:09.000Z</published>
    <updated>2016-09-20T06:02:38.006Z</updated>
    
    <content type="html"><![CDATA[<p>While thinking up ideas for business card designs, I came across this great idea for web developers. I created some samples, feel free to download and modify. If you come up with a cool improvement, feel free to <a href="mailto:louis@louisbourque.ca?Subject=Check out my cool business card design!" target="_blank" rel="external">share it with me</a>.</p>
<p>Click the preview image to download an XCF file which can easily be edited in <a href="https://www.gimp.org/" target="_blank" rel="external">GIMP</a>.</p>
<p><a href="/blog/2016/09/Developer-Business-Card/Business Card Front.xcf"><img src="/blog/2016/09/Developer-Business-Card/Business Card Front.png" alt="Business Card Front View (company)"></a><br><a href="/blog/2016/09/Developer-Business-Card/Business Card Front-personal.xcf"><img src="/blog/2016/09/Developer-Business-Card/Business Card Front-personal.png" alt="Business Card Front View (personal)"></a><br><a href="/blog/2016/09/Developer-Business-Card/Business Card Back-json.xcf"><img src="/blog/2016/09/Developer-Business-Card/Business Card Back-json.png" alt="Business Card Back View with JSON style"></a><br><a href="/blog/2016/09/Developer-Business-Card/Business Card Back-css.xcf"><img src="/blog/2016/09/Developer-Business-Card/Business Card Back-css.png" alt="Business Card Back View with CSS style"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;While thinking up ideas for business card designs, I came across this great idea for web developers. I created some samples, feel free to
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.louisbourque.ca/blog/2016/08/hello-world/"/>
    <id>http://www.louisbourque.ca/blog/2016/08/hello-world/</id>
    <published>2016-08-30T06:00:00.000Z</published>
    <updated>2016-09-19T22:26:25.201Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to my first blog post. In this blog I hope to write about the things that interest me with a focus on web development and programming.</p>
<p>I’m a minimalist in everything I do. I prefer simple solutions over complexity. Recently, I setup a web server on a Raspberry Pi with Wordpress. I played around with it for a while. It’s a great product with amazing plugins. Easy to use and write great posts. Yet, the complexity was bugging me. Pages were a little slow to load, even over my home network. The default theme had way too much CSS and JavaScript for my liking. The admin interface has so many features, I felt the constant urge to tweak settings.</p>
<p>I decided instead to go with a static blog. <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> looked like it had a nice balance of functionality and simplicity. It lets me create new posts using MarkDown with minimal friction and generates an RSS feed. All posts are just files in a folder, making backups a breeze and moving to a new platform should be effortless.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to my first blog post. In this blog I hope to write about the things that interest me with a focus on web development and program
    
    </summary>
    
    
  </entry>
  
</feed>
